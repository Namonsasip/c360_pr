l3_geo_time_spent_by_location_monthly:
  feature_list:
    sum_duration: "sum(sum_duration)"
  granularity: "imsi,start_of_month,location_id"

l3_area_from_ais_store_monthly:
  where_clause: ""
  feature_list:
    duration: "sum(duration)"
    num_of_times: "sum(num_of_times)"
  granularity: "imsi,start_of_month"

l3_area_from_competitor_store_monthly:
  where_clause: ""
  feature_list:
    duration: "sum(duration)"
    num_of_times: "sum(num_of_times)"
  granularity: "imsi,start_of_month"


##==============================Update 2020-06-12 by Thatt529==========================================##

###total_distance_km###
l3_geo_total_distance_km_monthly:
  where_clause: ""
  feature_list:
    avg_distance_km: "avg(sum_distance_km)"
    max_distance_km: "max(sum_distance_km)"
    min_distance_km: "min(sum_distance_km)"
    sum_distance_km: "sum(sum_distance_km)"
  granularity: "imsi,start_of_month"

###Traffic_fav_location###
l3_geo_use_traffic_home_work_weekly:
  where_clause: ""
  feature_list:
    Home_traffic_KB: "sum(Home_traffic_KB)"
    Work_traffic_KB: "sum(Work_traffic_KB)"
    Top1_location_traffic_KB: "sum(Top1_location_traffic_KB)"
    Top2_location_traffic_KB: "sum(Top2_location_traffic_KB)"
    share_Home_traffic_KB: "(sum(Home_traffic_KB)*100)/(sum(Home_traffic_KB)+sum(Work_traffic_KB)+sum(Top1_location_traffic_KB)+sum(Top2_location_traffic_KB))"
    share_Work_traffic_KB: "(sum(Work_traffic_KB)*100)/(sum(Home_traffic_KB)+sum(Work_traffic_KB)+sum(Top1_location_traffic_KB)+sum(Top2_location_traffic_KB))"
    share_Top1_location_traffic_KB: "(sum(Top1_location_traffic_KB)*100)/(sum(Home_traffic_KB)+sum(Work_traffic_KB)+sum(Top1_location_traffic_KB)+sum(Top2_location_traffic_KB))"
    share_Top2_location_traffic_KB: "(sum(Top2_location_traffic_KB)*100)/(sum(Home_traffic_KB)+sum(Work_traffic_KB)+sum(Top1_location_traffic_KB)+sum(Top2_location_traffic_KB))"
  granularity: "imsi,start_of_month"

###feature_sum_voice_location###
l3_geo_call_location_home_work_monthly:
  where_clause: ""
  feature_list:
    call_count_location_home_weekday: "sum(call_count_location_home_weekday)"
    call_count_location_work: "sum(call_count_location_work)"
    call_count_location_top_1st: "sum(call_count_location_top_1st)"
    call_count_location_top_2nd: "sum(call_count_location_top_2nd)"
  granularity: "imsi,start_of_month"


##==============================Update 2020-06-15 by Thatt529==========================================##

###Top_3_cells_on_voice_usage###
l3_geo_top3_cells_on_voice_usage:
  where_clause: ""
  feature_list:
    total_call: "sum(total_call)"
  granularity: "imsi,latitude,longitude,start_of_month"


##==============================Update 2020-06-17 by Thatt529==========================================##

###distance_top_call###
l3_geo_distance_top_call:
  where_clause: ""
  feature_list:
    max_distance_top_call: "sum(max_distance_top_call)"
    min_distance_top_call: "sum(min_distance_top_call)"
    avg_distance_top_call: "sum(avg_distance_top_call)"
    sd_distance_top_call: "sum(sd_distance_top_call)"
    sum_distance_top_call: "sum(sum_distance_top_call)"
  granularity: "imsi,start_of_month"


int_l3_geo_home_location_id_monthly:
  where_clause: "where duration != 0 and ((hour_in >= 18) or (hour_in < 18 and hour_out > 18) or (hour_in < 6 and hour_out > 6) or (hour_out <=6))"
  feature_list:
    duration: "sum(case when hour_in < 18 and hour_out > 18 then cast(to_unix_timestamp(time_out) as long) - (cast(to_unix_timestamp(event_partition_date) as long) + 64800)
                  when hour_in < 6 and hour_out > 6 then (cast(to_unix_timestamp(event_partition_date) as long) + 21600) - cast(to_unix_timestamp(time_out) as long)
                  else duration end)"
    days: "approx_count_distinct(event_partition_date)"
  granularity: "imsi, location_id, latitude, longitude, week_type, start_of_month"
  output_catalog: "int_l3_geo_home_location_id_monthly"
  partition_num_per_job: 10

int_l3_geo_work_location_id_monthly:
  where_clause: "where duration != 0 and (((hour_in >= 8 and hour_in < 18) and hour_out <= 18) or ((hour_in >= 8 and hour_in < 18) and hour_out > 18))"
  feature_list:
    duration: "sum(case when ((hour_in >= 8) and (hour_in < 18)) and (hour_out > 18)
                  then (cast(to_unix_timestamp(event_partition_date) as long) + 64800) - (cast(to_timestamp(time_in) as long))
                  else duration end)"
    days: "approx_count_distinct(event_partition_date)"
  granularity: "imsi, location_id, latitude, longitude, start_of_month"
  output_catalog: "int_l3_geo_work_location_id_monthly"
  partition_num_per_job: 10

l3_geo_home_work_location_id_monthly:
  where_clause: ""
  feature_list:
    imsi: "imsi"
    start_of_month: "start_of_month"
    home_weekday_location_id: "home_weekday_location_id"
    home_weekday_latitude: "home_weekday_latitude"
    home_weekday_longitude: "home_weekday_longitude"
    home_weekend_location_id: "home_weekend_location_id"
    home_weekend_latitude: "home_weekend_latitude"
    home_weekend_longitude: "home_weekend_longitude"
    work_location_id: "work_location_id"
    work_latitude: "work_latitude"
    work_longitude: "work_longitude"
  granularity: ""


l3_geo_home_weekday_city_citizens_monthly:
  where_clause: ""
  feature_list:
    start_of_month: "start_of_month"
    home_weekday_region_name: "region_name"
    home_weekday_province_name: "province_name"
    home_weekday_district_name: "district_name"
    home_weekday_sub_district_name: "sub_district_name"
    citizens: "citizens"
  granularity: ""